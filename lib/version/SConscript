from fbt.version import get_fast_git_version_id


Import("env")

env.Append(
    CPPPATH=[
        Dir(".").srcnode(),
    ],
    SDK_HEADERS=[
        File("version.h"),
    ],
    LINT_SOURCES=[
        Dir(".").srcnode(),
    ],
)


libenv = env.Clone(tools=["fbt_version"], FW_LIB_NAME="version")
libenv.ApplyLibFlags()


# Git Version management
version_depends = []
version_id_data = get_fast_git_version_id()
if version_id_data:
    version_depends = Value(version_id_data)

# Only invoke version generator if preliminary check target (version_depends) has changed
build_version = libenv.VersionBuilder(
    Dir("."),
    version_depends,
)

fw_version_json = libenv.InstallAs(
    "${BUILD_DIR}/${FIRMWARE_BUILD_CFG}.json", "version.json"
)
Alias("version_json", fw_version_json)

env.AppendUnique(
    FW_ARTIFACTS=[fw_version_json],
    FW_STATIC_ANALYSIS_DEPS=[fw_version_json],
)

if not version_depends:
    libenv.Precious(build_version)
    libenv.AlwaysBuild(build_version)

libenv.Append(CPPPATH=[libenv.Dir(".")])

sources = libenv.GlobRecursive("*.c")

lib = libenv.StaticLibrary("${FW_LIB_NAME}", sources)
libenv.Install("${LIB_DIST_DIR}", lib)
Return("lib")
